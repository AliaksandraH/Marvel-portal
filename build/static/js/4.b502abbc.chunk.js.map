{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"names":["View","_ref","data","id","name","description","thumbnail","desc","slice","classForImg","objectFit","_jsxs","className","children","_jsx","src","alt","style","Link","to","concat","RandomChar","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","process","setProcess","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newCharList","ended","wrap","_context","prev","next","length","_toConsumableArray","stop","_x","apply","arguments","itemRefs","useRef","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","item","i","imgStyle","tabIndex","ref","el","current","onCharSelected","onKeyPress","e","key","renderItems","disabled","display","comics","notComics","_Fragment","CharInfo","charId","CharSearchForm","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","errorInfo","console","log","this","setState","MainPage","selectedChar","Helmet","content"],"mappings":"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","file":"static/js/4.b502abbc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nimport \"./randomChar.scss\";\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { process, setProcess, getCharacter, clearError } =\r\n        useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 100000);\r\n\r\n        return () => {\r\n            clearInterval(timerId);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess(\"confirment\"));\r\n    };\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!\r\n                    <br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">Or choose another one</p>\r\n                <button className=\"button button__main\" onClick={updateChar}>\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img\r\n                    src={mjolnir}\r\n                    alt=\"mjolnir\"\r\n                    className=\"randomchar__decoration\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst View = ({ data }) => {\r\n    const { id, name, description, thumbnail } = data;\r\n    const desc = !description\r\n        ? \"There is no description for this character.\"\r\n        : description.slice(0, 100) + \"...\";\r\n    let classForImg = { objectFit: \"cover\" };\r\n    if (\r\n        thumbnail ===\r\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n    ) {\r\n        classForImg = { objectFit: \"contain\" };\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img\r\n                src={thumbnail}\r\n                alt=\"Random character\"\r\n                className=\"randomchar__img\"\r\n                style={classForImg}\r\n            />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">{desc}</p>\r\n                <div className=\"randomchar__btns\">\r\n                    <Link\r\n                        to={`/characters/${id}`}\r\n                        className=\"button button__main\"\r\n                    >\r\n                        <div className=\"inner\">homepage</div>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RandomChar;\r\n","import { useState, useEffect, useRef, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./charList.scss\";\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case \"waiting\":\r\n            return <Spinner />;\r\n        case \"loading\":\r\n            return newItemLoading ? <Component /> : <Spinner />;\r\n        case \"confirment\":\r\n            return <Component />;\r\n        case \"error\":\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error(\"Unexpected process state\");\r\n    }\r\n};\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { getAllCharacters, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess(\"confirment\"));\r\n    };\r\n\r\n    const onCharListLoaded = async (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n        setCharList([...charList, ...newCharList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset + 9);\r\n        setCharEnded(ended);\r\n    };\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const renderItems = (arr) => {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = { objectFit: \"cover\" };\r\n            if (\r\n                item.thumbnail ===\r\n                \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n            ) {\r\n                imgStyle = { objectFit: \"unset\" };\r\n            }\r\n\r\n            return (\r\n                <li\r\n                    key={item.id}\r\n                    className=\"char__item\"\r\n                    tabIndex={0}\r\n                    ref={(el) => (itemRefs.current[i] = el)}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id);\r\n                    }}\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === \" \" || e.key === \"Enter\") {\r\n                            props.onCharSelected(item.id);\r\n                        }\r\n                    }}\r\n                >\r\n                    <img\r\n                        src={item.thumbnail}\r\n                        alt={item.name}\r\n                        style={imgStyle}\r\n                    />\r\n                    <div className=\"char__name\">{item.name}</div>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return <ul className=\"char__grid\">{items}</ul>;\r\n    };\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => renderItems(charList), newItemLoading);\r\n        // eslint-disable-next-line\r\n    }, [process]);\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button\r\n                disabled={newItemLoading}\r\n                style={{ display: charEnded ? \"none\" : \"block\" }}\r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}\r\n            >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CharList;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nimport \"./charInfo.scss\";\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { process, getCharacter, clearError, setProcess } =\r\n        useMarvelService();\r\n\r\n    useEffect(() => {\r\n        if (props.charId !== null) {\r\n            updateChar();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [props.charId]);\r\n\r\n    const updateChar = () => {\r\n        if (!props.charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        getCharacter(props.charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess(\"confirment\"));\r\n    };\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    return <div className=\"char__info\">{setContent(process, View, char)}</div>;\r\n};\r\n\r\nconst View = ({ data }) => {\r\n    const { id, name, thumbnail, comics } = data;\r\n    let notComics = \"\";\r\n    if (comics.length === 0) {\r\n        notComics = (\r\n            <p className=\"char__comics-none\">\r\n                This persanage does not have a list of comics.\r\n            </p>\r\n        );\r\n    }\r\n\r\n    let classForImg = { objectFit: \"cover\" };\r\n    if (\r\n        thumbnail ===\r\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n    ) {\r\n        classForImg = { objectFit: \"contain\" };\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={classForImg} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <Link\r\n                            to={`/characters/${id}`}\r\n                            className=\"button button__main\"\r\n                        >\r\n                            <div className=\"inner\">homepage</div>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {notComics}\r\n                {comics.map((item, i) => {\r\n                    if (i < 3) {\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        );\r\n                    }\r\n                    if (i === 3) {\r\n                        return (\r\n                            <li key={i} className=\"char__comics-more\">\r\n                                More comics on the character's Page.\r\n                            </li>\r\n                        );\r\n                    }\r\n                    // eslint-disable-next-line array-callback-return\r\n                    return;\r\n                })}\r\n            </ul>\r\n        </>\r\n    );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default CharInfo;\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n    Formik,\r\n    Form,\r\n    Field,\r\n    ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { process, setProcess, getCharacterByName, clearError } =\r\n        useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess(\"confirment\"));\r\n    };\r\n\r\n    const errorMessage =\r\n        process === \"error\" ? (\r\n            <div className=\"char__search-critical-error\">\r\n                <ErrorMessage />\r\n            </div>\r\n        ) : null;\r\n\r\n    const results = !char ? null : char.length > 0 ? (\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">\r\n                There is! Visit {char[0].name} page?\r\n            </div>\r\n            <Link\r\n                to={`/characters/${char[0].id}`}\r\n                className=\"button button__secondary\"\r\n            >\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div>\r\n    ) : (\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again.\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: \"\",\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required(\"This field is required.\"),\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">\r\n                        Or find a character by name:\r\n                    </label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name=\"charName\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter name\"\r\n                        />\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"button button__main\"\r\n                            disabled={process === \"loading\"}\r\n                        >\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage\r\n                        component=\"div\"\r\n                        className=\"char__search-error\"\r\n                        name=\"charName\"\r\n                    />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from \"react\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    };\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport \"./mainPage.scss\";\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(0);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content=\"Marvel information portal\" />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div className=\"main__panel\">\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}